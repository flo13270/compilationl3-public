/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AIdFunctionDeclaration extends PFunctionDeclaration
{
    private TId _id_;
    private TLBr _lBr_;
    private PVariableDeclarationList _variableDeclarationList_;
    private TRBr _rBr_;
    private POptionalVariableDeclarationList _optionalVariableDeclarationList_;
    private PInstructionBloc _instructionBloc_;

    public AIdFunctionDeclaration()
    {
        // Constructor
    }

    public AIdFunctionDeclaration(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLBr _lBr_,
        @SuppressWarnings("hiding") PVariableDeclarationList _variableDeclarationList_,
        @SuppressWarnings("hiding") TRBr _rBr_,
        @SuppressWarnings("hiding") POptionalVariableDeclarationList _optionalVariableDeclarationList_,
        @SuppressWarnings("hiding") PInstructionBloc _instructionBloc_)
    {
        // Constructor
        setId(_id_);

        setLBr(_lBr_);

        setVariableDeclarationList(_variableDeclarationList_);

        setRBr(_rBr_);

        setOptionalVariableDeclarationList(_optionalVariableDeclarationList_);

        setInstructionBloc(_instructionBloc_);

    }

    @Override
    public Object clone()
    {
        return new AIdFunctionDeclaration(
            cloneNode(this._id_),
            cloneNode(this._lBr_),
            cloneNode(this._variableDeclarationList_),
            cloneNode(this._rBr_),
            cloneNode(this._optionalVariableDeclarationList_),
            cloneNode(this._instructionBloc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdFunctionDeclaration(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLBr getLBr()
    {
        return this._lBr_;
    }

    public void setLBr(TLBr node)
    {
        if(this._lBr_ != null)
        {
            this._lBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBr_ = node;
    }

    public PVariableDeclarationList getVariableDeclarationList()
    {
        return this._variableDeclarationList_;
    }

    public void setVariableDeclarationList(PVariableDeclarationList node)
    {
        if(this._variableDeclarationList_ != null)
        {
            this._variableDeclarationList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableDeclarationList_ = node;
    }

    public TRBr getRBr()
    {
        return this._rBr_;
    }

    public void setRBr(TRBr node)
    {
        if(this._rBr_ != null)
        {
            this._rBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBr_ = node;
    }

    public POptionalVariableDeclarationList getOptionalVariableDeclarationList()
    {
        return this._optionalVariableDeclarationList_;
    }

    public void setOptionalVariableDeclarationList(POptionalVariableDeclarationList node)
    {
        if(this._optionalVariableDeclarationList_ != null)
        {
            this._optionalVariableDeclarationList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._optionalVariableDeclarationList_ = node;
    }

    public PInstructionBloc getInstructionBloc()
    {
        return this._instructionBloc_;
    }

    public void setInstructionBloc(PInstructionBloc node)
    {
        if(this._instructionBloc_ != null)
        {
            this._instructionBloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instructionBloc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._lBr_)
            + toString(this._variableDeclarationList_)
            + toString(this._rBr_)
            + toString(this._optionalVariableDeclarationList_)
            + toString(this._instructionBloc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lBr_ == child)
        {
            this._lBr_ = null;
            return;
        }

        if(this._variableDeclarationList_ == child)
        {
            this._variableDeclarationList_ = null;
            return;
        }

        if(this._rBr_ == child)
        {
            this._rBr_ = null;
            return;
        }

        if(this._optionalVariableDeclarationList_ == child)
        {
            this._optionalVariableDeclarationList_ = null;
            return;
        }

        if(this._instructionBloc_ == child)
        {
            this._instructionBloc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lBr_ == oldChild)
        {
            setLBr((TLBr) newChild);
            return;
        }

        if(this._variableDeclarationList_ == oldChild)
        {
            setVariableDeclarationList((PVariableDeclarationList) newChild);
            return;
        }

        if(this._rBr_ == oldChild)
        {
            setRBr((TRBr) newChild);
            return;
        }

        if(this._optionalVariableDeclarationList_ == oldChild)
        {
            setOptionalVariableDeclarationList((POptionalVariableDeclarationList) newChild);
            return;
        }

        if(this._instructionBloc_ == oldChild)
        {
            setInstructionBloc((PInstructionBloc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
