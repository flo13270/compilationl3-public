/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramProgram(AProgramProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdexprVar(AIdexprVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVardecVariableDeclaration(AVardecVariableDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncdecFunctionDeclarationList(AFuncdecFunctionDeclarationList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideFunctionDeclarationList(AVideFunctionDeclarationList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdFunctionDeclaration(AIdFunctionDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVardecOptionalVariableDeclarationList(AVardecOptionalVariableDeclarationList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideOptionalVariableDeclarationList(AVideOptionalVariableDeclarationList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVardecVariableDeclarationList(AVardecVariableDeclarationList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideVariableDeclarationList(AVideVariableDeclarationList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVardecVariableDeclarationListBis(AVardecVariableDeclarationListBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideVariableDeclarationListBis(AVideVariableDeclarationListBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprlFunctionCall(AExprlFunctionCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprExpressionList(AExprExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideExpressionList(AVideExpressionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommaExpressionListBis(ACommaExpressionListBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideExpressionListBis(AVideExpressionListBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprandExpression(AExprandExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr1Expression(AExpr1Expression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprorExpression1(AExprorExpression1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr2Expression1(AExpr2Expression1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpreqExpression2(AExpreqExpression2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprlessExpression2(AExprlessExpression2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr3Expression2(AExpr3Expression2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprplusExpression3(AExprplusExpression3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprminusExpression3(AExprminusExpression3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr4Expression3(AExpr4Expression3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprmultExpression4(AExprmultExpression4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprdivExpression4(AExprdivExpression4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr5Expression4(AExpr5Expression4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprnotExpression5(AExprnotExpression5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr6Expression5(AExpr6Expression5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr6Expression6(AExpr6Expression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberExpression6(ANumberExpression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunccallExpression6(AFunccallExpression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExpression6(AVarExpression6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectationInstruction(AAffectationInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdInstruction(AIdInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileInstruction(AWhileInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallInstruction(AFunctionCallInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocInstruction(ABlocInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnInstruction(AReturnInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWriteInstruction(AWriteInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReadInstruction(AReadInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfIfInstruction(AIfIfInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseIfInstruction(AIfElseIfInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAccoladesInstructionBloc2(AAccoladesInstructionBloc2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarAffectationInstruction(AVarAffectationInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileWhileInstruction(AWhileWhileInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACalllFunctionCallInstruction(ACalllFunctionCallInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAccoladesInstructionBloc(AAccoladesInstructionBloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstructionInstructionList(AInstructionInstructionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideInstructionList(AVideInstructionList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstructionInstructionListBis(AInstructionInstructionListBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideInstructionListBis(AVideInstructionListBis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnReturnInstruction(AReturnReturnInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWriteWriteInstruction(AWriteWriteInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReadReadInstruction(AReadReadInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLSbr(TLSbr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRSbr(TRSbr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLCbr(TLCbr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRCbr(TRCbr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWrite(TWrite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRead(TRead node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
