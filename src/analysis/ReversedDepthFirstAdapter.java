/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgramProgram(AProgramProgram node)
    {
        defaultIn(node);
    }

    public void outAProgramProgram(AProgramProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramProgram(AProgramProgram node)
    {
        inAProgramProgram(node);
        if(node.getFunctionDeclarationList() != null)
        {
            node.getFunctionDeclarationList().apply(this);
        }
        if(node.getOptionalVariableDeclarationList() != null)
        {
            node.getOptionalVariableDeclarationList().apply(this);
        }
        outAProgramProgram(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAIdexprVar(AIdexprVar node)
    {
        defaultIn(node);
    }

    public void outAIdexprVar(AIdexprVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdexprVar(AIdexprVar node)
    {
        inAIdexprVar(node);
        if(node.getRSbr() != null)
        {
            node.getRSbr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLSbr() != null)
        {
            node.getLSbr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdexprVar(node);
    }

    public void inAVardecVariableDeclaration(AVardecVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVardecVariableDeclaration(AVardecVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVardecVariableDeclaration(AVardecVariableDeclaration node)
    {
        inAVardecVariableDeclaration(node);
        if(node.getRSbr() != null)
        {
            node.getRSbr().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getLSbr() != null)
        {
            node.getLSbr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVardecVariableDeclaration(node);
    }

    public void inAFuncdecFunctionDeclarationList(AFuncdecFunctionDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAFuncdecFunctionDeclarationList(AFuncdecFunctionDeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncdecFunctionDeclarationList(AFuncdecFunctionDeclarationList node)
    {
        inAFuncdecFunctionDeclarationList(node);
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        outAFuncdecFunctionDeclarationList(node);
    }

    public void inAVideFunctionDeclarationList(AVideFunctionDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAVideFunctionDeclarationList(AVideFunctionDeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideFunctionDeclarationList(AVideFunctionDeclarationList node)
    {
        inAVideFunctionDeclarationList(node);
        outAVideFunctionDeclarationList(node);
    }

    public void inAIdFunctionDeclaration(AIdFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIdFunctionDeclaration(AIdFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFunctionDeclaration(AIdFunctionDeclaration node)
    {
        inAIdFunctionDeclaration(node);
        if(node.getInstructionBloc() != null)
        {
            node.getInstructionBloc().apply(this);
        }
        if(node.getOptionalVariableDeclarationList() != null)
        {
            node.getOptionalVariableDeclarationList().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getVariableDeclarationList() != null)
        {
            node.getVariableDeclarationList().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdFunctionDeclaration(node);
    }

    public void inAVardecOptionalVariableDeclarationList(AVardecOptionalVariableDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAVardecOptionalVariableDeclarationList(AVardecOptionalVariableDeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVardecOptionalVariableDeclarationList(AVardecOptionalVariableDeclarationList node)
    {
        inAVardecOptionalVariableDeclarationList(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVariableDeclarationList() != null)
        {
            node.getVariableDeclarationList().apply(this);
        }
        outAVardecOptionalVariableDeclarationList(node);
    }

    public void inAVideOptionalVariableDeclarationList(AVideOptionalVariableDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAVideOptionalVariableDeclarationList(AVideOptionalVariableDeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideOptionalVariableDeclarationList(AVideOptionalVariableDeclarationList node)
    {
        inAVideOptionalVariableDeclarationList(node);
        outAVideOptionalVariableDeclarationList(node);
    }

    public void inAVardecVariableDeclarationList(AVardecVariableDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAVardecVariableDeclarationList(AVardecVariableDeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVardecVariableDeclarationList(AVardecVariableDeclarationList node)
    {
        inAVardecVariableDeclarationList(node);
        if(node.getVariableDeclarationListBis() != null)
        {
            node.getVariableDeclarationListBis().apply(this);
        }
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAVardecVariableDeclarationList(node);
    }

    public void inAVideVariableDeclarationList(AVideVariableDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAVideVariableDeclarationList(AVideVariableDeclarationList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideVariableDeclarationList(AVideVariableDeclarationList node)
    {
        inAVideVariableDeclarationList(node);
        outAVideVariableDeclarationList(node);
    }

    public void inAVardecVariableDeclarationListBis(AVardecVariableDeclarationListBis node)
    {
        defaultIn(node);
    }

    public void outAVardecVariableDeclarationListBis(AVardecVariableDeclarationListBis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVardecVariableDeclarationListBis(AVardecVariableDeclarationListBis node)
    {
        inAVardecVariableDeclarationListBis(node);
        if(node.getVariableDeclarationListBis() != null)
        {
            node.getVariableDeclarationListBis().apply(this);
        }
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVardecVariableDeclarationListBis(node);
    }

    public void inAVideVariableDeclarationListBis(AVideVariableDeclarationListBis node)
    {
        defaultIn(node);
    }

    public void outAVideVariableDeclarationListBis(AVideVariableDeclarationListBis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideVariableDeclarationListBis(AVideVariableDeclarationListBis node)
    {
        inAVideVariableDeclarationListBis(node);
        outAVideVariableDeclarationListBis(node);
    }

    public void inAExprlFunctionCall(AExprlFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAExprlFunctionCall(AExprlFunctionCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprlFunctionCall(AExprlFunctionCall node)
    {
        inAExprlFunctionCall(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAExprlFunctionCall(node);
    }

    public void inAExprExpressionList(AExprExpressionList node)
    {
        defaultIn(node);
    }

    public void outAExprExpressionList(AExprExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprExpressionList(AExprExpressionList node)
    {
        inAExprExpressionList(node);
        if(node.getExpressionListBis() != null)
        {
            node.getExpressionListBis().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExprExpressionList(node);
    }

    public void inAVideExpressionList(AVideExpressionList node)
    {
        defaultIn(node);
    }

    public void outAVideExpressionList(AVideExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideExpressionList(AVideExpressionList node)
    {
        inAVideExpressionList(node);
        outAVideExpressionList(node);
    }

    public void inACommaExpressionListBis(ACommaExpressionListBis node)
    {
        defaultIn(node);
    }

    public void outACommaExpressionListBis(ACommaExpressionListBis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaExpressionListBis(ACommaExpressionListBis node)
    {
        inACommaExpressionListBis(node);
        if(node.getExpressionListBis() != null)
        {
            node.getExpressionListBis().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaExpressionListBis(node);
    }

    public void inAVideExpressionListBis(AVideExpressionListBis node)
    {
        defaultIn(node);
    }

    public void outAVideExpressionListBis(AVideExpressionListBis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideExpressionListBis(AVideExpressionListBis node)
    {
        inAVideExpressionListBis(node);
        outAVideExpressionListBis(node);
    }

    public void inAExprandExpression(AExprandExpression node)
    {
        defaultIn(node);
    }

    public void outAExprandExpression(AExprandExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprandExpression(AExprandExpression node)
    {
        inAExprandExpression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExprandExpression(node);
    }

    public void inAExpr1Expression(AExpr1Expression node)
    {
        defaultIn(node);
    }

    public void outAExpr1Expression(AExpr1Expression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr1Expression(AExpr1Expression node)
    {
        inAExpr1Expression(node);
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAExpr1Expression(node);
    }

    public void inAExprorExpression1(AExprorExpression1 node)
    {
        defaultIn(node);
    }

    public void outAExprorExpression1(AExprorExpression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprorExpression1(AExprorExpression1 node)
    {
        inAExprorExpression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExpression1() != null)
        {
            node.getExpression1().apply(this);
        }
        outAExprorExpression1(node);
    }

    public void inAExpr2Expression1(AExpr2Expression1 node)
    {
        defaultIn(node);
    }

    public void outAExpr2Expression1(AExpr2Expression1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr2Expression1(AExpr2Expression1 node)
    {
        inAExpr2Expression1(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAExpr2Expression1(node);
    }

    public void inAExpreqExpression2(AExpreqExpression2 node)
    {
        defaultIn(node);
    }

    public void outAExpreqExpression2(AExpreqExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpreqExpression2(AExpreqExpression2 node)
    {
        inAExpreqExpression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAExpreqExpression2(node);
    }

    public void inAExprlessExpression2(AExprlessExpression2 node)
    {
        defaultIn(node);
    }

    public void outAExprlessExpression2(AExprlessExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprlessExpression2(AExprlessExpression2 node)
    {
        inAExprlessExpression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAExprlessExpression2(node);
    }

    public void inAExpr3Expression2(AExpr3Expression2 node)
    {
        defaultIn(node);
    }

    public void outAExpr3Expression2(AExpr3Expression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr3Expression2(AExpr3Expression2 node)
    {
        inAExpr3Expression2(node);
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAExpr3Expression2(node);
    }

    public void inAExprplusExpression3(AExprplusExpression3 node)
    {
        defaultIn(node);
    }

    public void outAExprplusExpression3(AExprplusExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprplusExpression3(AExprplusExpression3 node)
    {
        inAExprplusExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAExprplusExpression3(node);
    }

    public void inAExprminusExpression3(AExprminusExpression3 node)
    {
        defaultIn(node);
    }

    public void outAExprminusExpression3(AExprminusExpression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprminusExpression3(AExprminusExpression3 node)
    {
        inAExprminusExpression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpression3() != null)
        {
            node.getExpression3().apply(this);
        }
        outAExprminusExpression3(node);
    }

    public void inAExpr4Expression3(AExpr4Expression3 node)
    {
        defaultIn(node);
    }

    public void outAExpr4Expression3(AExpr4Expression3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr4Expression3(AExpr4Expression3 node)
    {
        inAExpr4Expression3(node);
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAExpr4Expression3(node);
    }

    public void inAExprmultExpression4(AExprmultExpression4 node)
    {
        defaultIn(node);
    }

    public void outAExprmultExpression4(AExprmultExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprmultExpression4(AExprmultExpression4 node)
    {
        inAExprmultExpression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAExprmultExpression4(node);
    }

    public void inAExprdivExpression4(AExprdivExpression4 node)
    {
        defaultIn(node);
    }

    public void outAExprdivExpression4(AExprdivExpression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprdivExpression4(AExprdivExpression4 node)
    {
        inAExprdivExpression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpression4() != null)
        {
            node.getExpression4().apply(this);
        }
        outAExprdivExpression4(node);
    }

    public void inAExpr5Expression4(AExpr5Expression4 node)
    {
        defaultIn(node);
    }

    public void outAExpr5Expression4(AExpr5Expression4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr5Expression4(AExpr5Expression4 node)
    {
        inAExpr5Expression4(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        outAExpr5Expression4(node);
    }

    public void inAExprnotExpression5(AExprnotExpression5 node)
    {
        defaultIn(node);
    }

    public void outAExprnotExpression5(AExprnotExpression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprnotExpression5(AExprnotExpression5 node)
    {
        inAExprnotExpression5(node);
        if(node.getExpression5() != null)
        {
            node.getExpression5().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outAExprnotExpression5(node);
    }

    public void inAExpr6Expression5(AExpr6Expression5 node)
    {
        defaultIn(node);
    }

    public void outAExpr6Expression5(AExpr6Expression5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr6Expression5(AExpr6Expression5 node)
    {
        inAExpr6Expression5(node);
        if(node.getExpression6() != null)
        {
            node.getExpression6().apply(this);
        }
        outAExpr6Expression5(node);
    }

    public void inAExpr6Expression6(AExpr6Expression6 node)
    {
        defaultIn(node);
    }

    public void outAExpr6Expression6(AExpr6Expression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr6Expression6(AExpr6Expression6 node)
    {
        inAExpr6Expression6(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        outAExpr6Expression6(node);
    }

    public void inANumberExpression6(ANumberExpression6 node)
    {
        defaultIn(node);
    }

    public void outANumberExpression6(ANumberExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExpression6(ANumberExpression6 node)
    {
        inANumberExpression6(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberExpression6(node);
    }

    public void inAFunccallExpression6(AFunccallExpression6 node)
    {
        defaultIn(node);
    }

    public void outAFunccallExpression6(AFunccallExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunccallExpression6(AFunccallExpression6 node)
    {
        inAFunccallExpression6(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunccallExpression6(node);
    }

    public void inAVarExpression6(AVarExpression6 node)
    {
        defaultIn(node);
    }

    public void outAVarExpression6(AVarExpression6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpression6(AVarExpression6 node)
    {
        inAVarExpression6(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExpression6(node);
    }

    public void inAAffectationInstruction(AAffectationInstruction node)
    {
        defaultIn(node);
    }

    public void outAAffectationInstruction(AAffectationInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectationInstruction(AAffectationInstruction node)
    {
        inAAffectationInstruction(node);
        if(node.getAffectationInstruction() != null)
        {
            node.getAffectationInstruction().apply(this);
        }
        outAAffectationInstruction(node);
    }

    public void inAIdInstruction(AIdInstruction node)
    {
        defaultIn(node);
    }

    public void outAIdInstruction(AIdInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdInstruction(AIdInstruction node)
    {
        inAIdInstruction(node);
        if(node.getInstruction() != null)
        {
            node.getInstruction().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdInstruction(node);
    }

    public void inAWhileInstruction(AWhileInstruction node)
    {
        defaultIn(node);
    }

    public void outAWhileInstruction(AWhileInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileInstruction(AWhileInstruction node)
    {
        inAWhileInstruction(node);
        if(node.getWhileInstruction() != null)
        {
            node.getWhileInstruction().apply(this);
        }
        outAWhileInstruction(node);
    }

    public void inAFunctionCallInstruction(AFunctionCallInstruction node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallInstruction(AFunctionCallInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallInstruction(AFunctionCallInstruction node)
    {
        inAFunctionCallInstruction(node);
        if(node.getFunctionCallInstruction() != null)
        {
            node.getFunctionCallInstruction().apply(this);
        }
        outAFunctionCallInstruction(node);
    }

    public void inABlocInstruction(ABlocInstruction node)
    {
        defaultIn(node);
    }

    public void outABlocInstruction(ABlocInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocInstruction(ABlocInstruction node)
    {
        inABlocInstruction(node);
        if(node.getInstructionBloc() != null)
        {
            node.getInstructionBloc().apply(this);
        }
        outABlocInstruction(node);
    }

    public void inAReturnInstruction(AReturnInstruction node)
    {
        defaultIn(node);
    }

    public void outAReturnInstruction(AReturnInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnInstruction(AReturnInstruction node)
    {
        inAReturnInstruction(node);
        if(node.getReturnInstruction() != null)
        {
            node.getReturnInstruction().apply(this);
        }
        outAReturnInstruction(node);
    }

    public void inAWriteInstruction(AWriteInstruction node)
    {
        defaultIn(node);
    }

    public void outAWriteInstruction(AWriteInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteInstruction(AWriteInstruction node)
    {
        inAWriteInstruction(node);
        if(node.getWriteInstruction() != null)
        {
            node.getWriteInstruction().apply(this);
        }
        outAWriteInstruction(node);
    }

    public void inAReadInstruction(AReadInstruction node)
    {
        defaultIn(node);
    }

    public void outAReadInstruction(AReadInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadInstruction(AReadInstruction node)
    {
        inAReadInstruction(node);
        if(node.getReadInstruction() != null)
        {
            node.getReadInstruction().apply(this);
        }
        outAReadInstruction(node);
    }

    public void inAIfIfInstruction(AIfIfInstruction node)
    {
        defaultIn(node);
    }

    public void outAIfIfInstruction(AIfIfInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfIfInstruction(AIfIfInstruction node)
    {
        inAIfIfInstruction(node);
        if(node.getInstructionBloc() != null)
        {
            node.getInstructionBloc().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfIfInstruction(node);
    }

    public void inAIfElseIfInstruction(AIfElseIfInstruction node)
    {
        defaultIn(node);
    }

    public void outAIfElseIfInstruction(AIfElseIfInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseIfInstruction(AIfElseIfInstruction node)
    {
        inAIfElseIfInstruction(node);
        if(node.getInstructionBloc2() != null)
        {
            node.getInstructionBloc2().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getInstructionBloc() != null)
        {
            node.getInstructionBloc().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfElseIfInstruction(node);
    }

    public void inAAccoladesInstructionBloc2(AAccoladesInstructionBloc2 node)
    {
        defaultIn(node);
    }

    public void outAAccoladesInstructionBloc2(AAccoladesInstructionBloc2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAccoladesInstructionBloc2(AAccoladesInstructionBloc2 node)
    {
        inAAccoladesInstructionBloc2(node);
        if(node.getRCbr() != null)
        {
            node.getRCbr().apply(this);
        }
        if(node.getInstructionList() != null)
        {
            node.getInstructionList().apply(this);
        }
        if(node.getLCbr() != null)
        {
            node.getLCbr().apply(this);
        }
        outAAccoladesInstructionBloc2(node);
    }

    public void inAVarAffectationInstruction(AVarAffectationInstruction node)
    {
        defaultIn(node);
    }

    public void outAVarAffectationInstruction(AVarAffectationInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarAffectationInstruction(AVarAffectationInstruction node)
    {
        inAVarAffectationInstruction(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarAffectationInstruction(node);
    }

    public void inAWhileWhileInstruction(AWhileWhileInstruction node)
    {
        defaultIn(node);
    }

    public void outAWhileWhileInstruction(AWhileWhileInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileWhileInstruction(AWhileWhileInstruction node)
    {
        inAWhileWhileInstruction(node);
        if(node.getInstructionBloc() != null)
        {
            node.getInstructionBloc().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileWhileInstruction(node);
    }

    public void inACalllFunctionCallInstruction(ACalllFunctionCallInstruction node)
    {
        defaultIn(node);
    }

    public void outACalllFunctionCallInstruction(ACalllFunctionCallInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACalllFunctionCallInstruction(ACalllFunctionCallInstruction node)
    {
        inACalllFunctionCallInstruction(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outACalllFunctionCallInstruction(node);
    }

    public void inAAccoladesInstructionBloc(AAccoladesInstructionBloc node)
    {
        defaultIn(node);
    }

    public void outAAccoladesInstructionBloc(AAccoladesInstructionBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAccoladesInstructionBloc(AAccoladesInstructionBloc node)
    {
        inAAccoladesInstructionBloc(node);
        if(node.getRCbr() != null)
        {
            node.getRCbr().apply(this);
        }
        if(node.getInstructionList() != null)
        {
            node.getInstructionList().apply(this);
        }
        if(node.getLCbr() != null)
        {
            node.getLCbr().apply(this);
        }
        outAAccoladesInstructionBloc(node);
    }

    public void inAInstructionInstructionList(AInstructionInstructionList node)
    {
        defaultIn(node);
    }

    public void outAInstructionInstructionList(AInstructionInstructionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstructionInstructionList(AInstructionInstructionList node)
    {
        inAInstructionInstructionList(node);
        if(node.getInstructionListBis() != null)
        {
            node.getInstructionListBis().apply(this);
        }
        if(node.getInstruction() != null)
        {
            node.getInstruction().apply(this);
        }
        outAInstructionInstructionList(node);
    }

    public void inAVideInstructionList(AVideInstructionList node)
    {
        defaultIn(node);
    }

    public void outAVideInstructionList(AVideInstructionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideInstructionList(AVideInstructionList node)
    {
        inAVideInstructionList(node);
        outAVideInstructionList(node);
    }

    public void inAInstructionInstructionListBis(AInstructionInstructionListBis node)
    {
        defaultIn(node);
    }

    public void outAInstructionInstructionListBis(AInstructionInstructionListBis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstructionInstructionListBis(AInstructionInstructionListBis node)
    {
        inAInstructionInstructionListBis(node);
        if(node.getInstructionListBis() != null)
        {
            node.getInstructionListBis().apply(this);
        }
        outAInstructionInstructionListBis(node);
    }

    public void inAVideInstructionListBis(AVideInstructionListBis node)
    {
        defaultIn(node);
    }

    public void outAVideInstructionListBis(AVideInstructionListBis node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideInstructionListBis(AVideInstructionListBis node)
    {
        inAVideInstructionListBis(node);
        outAVideInstructionListBis(node);
    }

    public void inAReturnReturnInstruction(AReturnReturnInstruction node)
    {
        defaultIn(node);
    }

    public void outAReturnReturnInstruction(AReturnReturnInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnReturnInstruction(AReturnReturnInstruction node)
    {
        inAReturnReturnInstruction(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnReturnInstruction(node);
    }

    public void inAWriteWriteInstruction(AWriteWriteInstruction node)
    {
        defaultIn(node);
    }

    public void outAWriteWriteInstruction(AWriteWriteInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteWriteInstruction(AWriteWriteInstruction node)
    {
        inAWriteWriteInstruction(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getWrite() != null)
        {
            node.getWrite().apply(this);
        }
        outAWriteWriteInstruction(node);
    }

    public void inAReadReadInstruction(AReadReadInstruction node)
    {
        defaultIn(node);
    }

    public void outAReadReadInstruction(AReadReadInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadReadInstruction(AReadReadInstruction node)
    {
        inAReadReadInstruction(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getRead() != null)
        {
            node.getRead().apply(this);
        }
        outAReadReadInstruction(node);
    }
}
