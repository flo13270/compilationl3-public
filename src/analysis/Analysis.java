/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramProgram(AProgramProgram node);
    void caseAIdVar(AIdVar node);
    void caseAIdexprVar(AIdexprVar node);
    void caseAVardecVariableDeclaration(AVardecVariableDeclaration node);
    void caseAFuncdecFunctionDeclarationList(AFuncdecFunctionDeclarationList node);
    void caseAVideFunctionDeclarationList(AVideFunctionDeclarationList node);
    void caseAIdFunctionDeclaration(AIdFunctionDeclaration node);
    void caseAVardecOptionalVariableDeclarationList(AVardecOptionalVariableDeclarationList node);
    void caseAVideOptionalVariableDeclarationList(AVideOptionalVariableDeclarationList node);
    void caseAVardecVariableDeclarationList(AVardecVariableDeclarationList node);
    void caseAVideVariableDeclarationList(AVideVariableDeclarationList node);
    void caseAVardecVariableDeclarationListBis(AVardecVariableDeclarationListBis node);
    void caseAVideVariableDeclarationListBis(AVideVariableDeclarationListBis node);
    void caseAExprlFunctionCall(AExprlFunctionCall node);
    void caseAExprExpressionList(AExprExpressionList node);
    void caseAVideExpressionList(AVideExpressionList node);
    void caseACommaExpressionListBis(ACommaExpressionListBis node);
    void caseAVideExpressionListBis(AVideExpressionListBis node);
    void caseAExprandExpression(AExprandExpression node);
    void caseAExpr1Expression(AExpr1Expression node);
    void caseAExprorExpression1(AExprorExpression1 node);
    void caseAExpr2Expression1(AExpr2Expression1 node);
    void caseAExpreqExpression2(AExpreqExpression2 node);
    void caseAExprlessExpression2(AExprlessExpression2 node);
    void caseAExpr3Expression2(AExpr3Expression2 node);
    void caseAExprplusExpression3(AExprplusExpression3 node);
    void caseAExprminusExpression3(AExprminusExpression3 node);
    void caseAExpr4Expression3(AExpr4Expression3 node);
    void caseAExprmultExpression4(AExprmultExpression4 node);
    void caseAExprdivExpression4(AExprdivExpression4 node);
    void caseAExpr5Expression4(AExpr5Expression4 node);
    void caseAExprnotExpression5(AExprnotExpression5 node);
    void caseAExpr6Expression5(AExpr6Expression5 node);
    void caseAExpr6Expression6(AExpr6Expression6 node);
    void caseANumberExpression6(ANumberExpression6 node);
    void caseAFunccallExpression6(AFunccallExpression6 node);
    void caseAVarExpression6(AVarExpression6 node);
    void caseAAffectationInstruction(AAffectationInstruction node);
    void caseAIdInstruction(AIdInstruction node);
    void caseAWhileInstruction(AWhileInstruction node);
    void caseAFunctionCallInstruction(AFunctionCallInstruction node);
    void caseABlocInstruction(ABlocInstruction node);
    void caseAReturnInstruction(AReturnInstruction node);
    void caseAWriteInstruction(AWriteInstruction node);
    void caseAReadInstruction(AReadInstruction node);
    void caseAIfIfInstruction(AIfIfInstruction node);
    void caseAIfElseIfInstruction(AIfElseIfInstruction node);
    void caseAAccoladesInstructionBloc2(AAccoladesInstructionBloc2 node);
    void caseAVarAffectationInstruction(AVarAffectationInstruction node);
    void caseAWhileWhileInstruction(AWhileWhileInstruction node);
    void caseACalllFunctionCallInstruction(ACalllFunctionCallInstruction node);
    void caseAAccoladesInstructionBloc(AAccoladesInstructionBloc node);
    void caseAInstructionInstructionList(AInstructionInstructionList node);
    void caseAVideInstructionList(AVideInstructionList node);
    void caseAInstructionInstructionListBis(AInstructionInstructionListBis node);
    void caseAVideInstructionListBis(AVideInstructionListBis node);
    void caseAReturnReturnInstruction(AReturnReturnInstruction node);
    void caseAWriteWriteInstruction(AWriteWriteInstruction node);
    void caseAReadReadInstruction(AReadReadInstruction node);

    void caseTSpace(TSpace node);
    void caseTComment(TComment node);
    void caseTNumber(TNumber node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTLess(TLess node);
    void caseTEq(TEq node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTIf(TIf node);
    void caseTLSbr(TLSbr node);
    void caseTRSbr(TRSbr node);
    void caseTInt(TInt node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTLCbr(TLCbr node);
    void caseTRCbr(TRCbr node);
    void caseTReturn(TReturn node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTWrite(TWrite node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTRead(TRead node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
