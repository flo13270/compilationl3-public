Tokens

space = (' ' | 13 | 10)+;
comment = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
number = ['0' .. '9']+;
plus = '+';
minus = '-';
mult = '*';
div = '/';
less = '<';
eq = '=';
then = 'alors';
else = 'sinon';
if = 'si';
l_sbr = '[';
r_sbr = ']';
int = 'entier';
or = '|';
not = '!';
and = '&';
l_cbr = '{';
r_cbr = '}';
return = 'retour';
while = 'tantque';
do = 'faire';
write = 'ecrire';
l_br = '(';
r_br = ')';
read = 'lire';
semicolon = ';';
comma = ',';
id = [[['a' .. 'z'] + ['A' .. 'Z']] + ['_' + '$']][[['a' .. 'z'] + ['A' .. 'Z']] + ['0' .. '9']];

Productions

program = 
{program} optional_variable_declaration_list function_declaration_list;

var = 
{id} id | 
{idexpr} id l_sbr expression r_sbr;

variable_declaration = 
{vardec} id l_sbr number r_sbr;

function_declaration_list = 
{funcdec} function_declaration | 
{vide};

function_declaration = 
{id} id l_br variable_declaration_list r_br optional_variable_declaration_list instruction_bloc;

optional_variable_declaration_list = 
{vardec} variable_declaration_list semicolon | 
{vide};

variable_declaration_list = 
{vardec} variable_declaration variable_declaration_list_bis | 
{vide};

variable_declaration_list_bis = 
{vardec} semicolon variable_declaration variable_declaration_list_bis | 
{vide};

function_call = 
{exprl} id l_br expression_list r_br;

expression_list = 
{expr} expression expression_list_bis | 
{vide};

expression_list_bis = 
{comma} comma expression expression_list_bis | 
{vide};

//expressions

expression = 
{exprand} expression or expression1 | 
{expr1} expression1;

expression1 = 
{expror}expression1 and expression2 | 
{expr2}expression2;

expression2 = 
{expreq} expression2 eq expression3 | 
{exprless} expression2 less expression3 | 
{expr3} expression3;

expression3 = 
{exprplus} expression3 plus expression4 | 
{exprminus} expression3 minus expression4 | 
{expr4} expression4;

expression4 = 
{exprmult} expression4 mult expression5 | 
{exprdiv} expression4 div expression5 | 
{expr5} expression5;

expression5 = 
{exprnot} not expression5 | 
{expr6} expression6;

expression6 = 
{expr6} l_br expression r_br | 
{number} number | 
{funccall} function_call | 
{var} var;

//instructions

instruction = 
{affectation} affectation_instruction | 
{id} id instruction | 
{while} while_instruction | 
{function_call} function_call_instruction | 
{bloc} instruction_bloc | 
{return} return_instruction | 
{write} write_instruction | 
{read} read_instruction;	

if_instruction = 
{if} if expression then instruction_bloc | 
{if_else} if expression then instruction_bloc else instruction_bloc2;

instruction_bloc2 = 
{accolades} l_cbr instruction_list r_cbr;

affectation_instruction = 
{var} var eq expression semicolon;

while_instruction = 
{while} while expression do instruction_bloc;

function_call_instruction = 
{calll} function_call;

instruction_bloc = 
{accolades} l_cbr instruction_list r_cbr;

instruction_list = 
{instruction} instruction instruction_list_bis | 
{vide};

instruction_list_bis = 
{instruction} instruction_list_bis | 
{vide};

return_instruction = 
{return} return expression semicolon;

write_instruction = 
{write} write l_br expression r_br semicolon;

read_instruction = 
{read} read l_br r_br semicolon;